guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_a <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_a)), shape=".") +
scale_colour_manual(values=NewGreens, name="As in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# Putting them all together
grid.arrange(plot_a, plot_c, plot_g, plot_t, nrow = 2)
# Spit out correlation
cor.test(mydata$x_normcounts, mydata$y_normcounts, method="pearson", conf.level=0.95)
library(ggplot2)
library(gtable)
library(gridExtra)
library(RColorBrewer)
# Load data
normcnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-4DiffCycle-Phusion-2xx16dilu-0cycPCR-IIIc1-E1-ZhuBar96p1-bTAGTGTTG_S49_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
kmerbasefreqs <- readRDS("~/github/selex2019/analysis/kmerbasefreqs.RDS", refhook=NULL)
xcnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-3DiffEnzyme-DreamTaq-1xbottolNeckPCR-IIIc1-D6-ZhuBar96p1-bGCTCTTGG_S42_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
ycnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-3DiffEnzyme-DreamTaq-2xbottolNeckPCR-IIIc1-D7-ZhuBar96p1-bTGGAACTA_S43_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
# Define axis labels here
# (trust me, this is easier than extracting this info from the filenames)
xlabel = "Phusion bottleneck 1 fold change"
ylabel = "Phusion bottleneck 2 fold change"
kmers <- nrow(normcnt)
# Normalise data
xcnt_norm <- data.frame(normcnt$kmer, xcnt$counts/normcnt$counts)
colnames(xcnt_norm) <- c("kmer", "x_normcounts")
ycnt_norm <- data.frame(normcnt$kmer, ycnt$counts/normcnt$counts)
colnames(ycnt_norm) <- c("kmer", "y_normcounts")
# Prepare data frame for plotting
mydata <- data.frame(normcnt$kmer, xcnt_norm$x_normcounts, ycnt_norm$y_normcounts, kmerbasefreqs)
colnames(mydata) <- c("kmer", "x_normcounts", "y_normcounts", "no_a", "no_c", "no_g", "no_t")
# Extend colour palettes to cover 10 values (0-9)
NewGreens <- colorRampPalette(brewer.pal(9,"Greens"))(10)
NewBlues <- colorRampPalette(brewer.pal(9,"Blues"))(10)
NewPurples <- colorRampPalette(brewer.pal(9,"Purples"))(10)
NewReds <- colorRampPalette(brewer.pal(9,"Reds"))(10)
# Define plots
plot_a <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_a)), shape=".") +
scale_colour_manual(values=NewGreens, name="As in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_c <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_c)), shape=".") +
scale_colour_manual(values=NewBlues, name="Cs in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_g <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_g)), shape=".") +
scale_colour_manual(values=NewPurples, name="Gs in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_t <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_t)), shape=".") +
scale_colour_manual(values=NewReds, name="Ts in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_a <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_a)), shape=".") +
scale_colour_manual(values=NewGreens, name="As in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# Putting them all together
grid.arrange(plot_a, plot_c, plot_g, plot_t, nrow = 2)
# Spit out correlation
cor.test(mydata$x_normcounts, mydata$y_normcounts, method="pearson", conf.level=0.95)
library(ggplot2)
library(gtable)
library(gridExtra)
library(RColorBrewer)
# Load data
normcnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-4DiffCycle-Phusion-2xx16dilu-0cycPCR-IIIc1-E1-ZhuBar96p1-bTAGTGTTG_S49_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
kmerbasefreqs <- readRDS("~/github/selex2019/analysis/kmerbasefreqs.RDS", refhook=NULL)
xcnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-3DiffEnzyme-DreamTaq-1xbottolNeckPCR-IIIc1-D6-ZhuBar96p1-bGCTCTTGG_S42_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
ycnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-3DiffEnzyme-DreamTaq-2xbottolNeckPCR-IIIc1-D7-ZhuBar96p1-bTGGAACTA_S43_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
# Define axis labels here
# (trust me, this is easier than extracting this info from the filenames)
xlabel = "DreamTaq bottleneck 1 fold change"
ylabel = "DreamTaq bottleneck 2 fold change"
kmers <- nrow(normcnt)
# Normalise data
xcnt_norm <- data.frame(normcnt$kmer, xcnt$counts/normcnt$counts)
colnames(xcnt_norm) <- c("kmer", "x_normcounts")
ycnt_norm <- data.frame(normcnt$kmer, ycnt$counts/normcnt$counts)
colnames(ycnt_norm) <- c("kmer", "y_normcounts")
# Prepare data frame for plotting
mydata <- data.frame(normcnt$kmer, xcnt_norm$x_normcounts, ycnt_norm$y_normcounts, kmerbasefreqs)
colnames(mydata) <- c("kmer", "x_normcounts", "y_normcounts", "no_a", "no_c", "no_g", "no_t")
# Extend colour palettes to cover 10 values (0-9)
NewGreens <- colorRampPalette(brewer.pal(9,"Greens"))(10)
NewBlues <- colorRampPalette(brewer.pal(9,"Blues"))(10)
NewPurples <- colorRampPalette(brewer.pal(9,"Purples"))(10)
NewReds <- colorRampPalette(brewer.pal(9,"Reds"))(10)
# Define plots
plot_a <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_a)), shape=".") +
scale_colour_manual(values=NewGreens, name="As in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_c <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_c)), shape=".") +
scale_colour_manual(values=NewBlues, name="Cs in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_g <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_g)), shape=".") +
scale_colour_manual(values=NewPurples, name="Gs in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_t <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_t)), shape=".") +
scale_colour_manual(values=NewReds, name="Ts in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_a <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_a)), shape=".") +
scale_colour_manual(values=NewGreens, name="As in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# Putting them all together
grid.arrange(plot_a, plot_c, plot_g, plot_t, nrow = 2)
# Spit out correlation
cor.test(mydata$x_normcounts, mydata$y_normcounts, method="pearson", conf.level=0.95)
library(ggplot2)
library(gtable)
library(gridExtra)
library(RColorBrewer)
# Load data
normcnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-4DiffCycle-Phusion-2xx16dilu-0cycPCR-IIIc1-E1-ZhuBar96p1-bTAGTGTTG_S49_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
kmerbasefreqs <- readRDS("~/github/selex2019/analysis/kmerbasefreqs.RDS", refhook=NULL)
xcnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-3DiffEnzyme-Phire-1xbottolNeckPCR-IIIc1-B6-ZhuBar96p1-bGACGGTGC_S18_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
ycnt <- readRDS("~/selex2019/kmer_cnt_R_PCRBIAS/Trulig147v1III-Arin2-PCRbias-3DiffEnzyme-Phire-2xbottolNeckPCR-IIIc1-B7-ZhuBar96p1-bACTTACTC_S19_R1_001.peared_trimmed.fq.gz.RDS", refhook=NULL)
# Define axis labels here
# (trust me, this is easier than extracting this info from the filenames)
xlabel = "Phire bottleneck 1 fold change"
ylabel = "Phire bottleneck 2 fold change"
kmers <- nrow(normcnt)
# Normalise data
xcnt_norm <- data.frame(normcnt$kmer, xcnt$counts/normcnt$counts)
colnames(xcnt_norm) <- c("kmer", "x_normcounts")
ycnt_norm <- data.frame(normcnt$kmer, ycnt$counts/normcnt$counts)
colnames(ycnt_norm) <- c("kmer", "y_normcounts")
# Prepare data frame for plotting
mydata <- data.frame(normcnt$kmer, xcnt_norm$x_normcounts, ycnt_norm$y_normcounts, kmerbasefreqs)
colnames(mydata) <- c("kmer", "x_normcounts", "y_normcounts", "no_a", "no_c", "no_g", "no_t")
# Extend colour palettes to cover 10 values (0-9)
NewGreens <- colorRampPalette(brewer.pal(9,"Greens"))(10)
NewBlues <- colorRampPalette(brewer.pal(9,"Blues"))(10)
NewPurples <- colorRampPalette(brewer.pal(9,"Purples"))(10)
NewReds <- colorRampPalette(brewer.pal(9,"Reds"))(10)
# Define plots
plot_a <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_a)), shape=".") +
scale_colour_manual(values=NewGreens, name="As in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_c <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_c)), shape=".") +
scale_colour_manual(values=NewBlues, name="Cs in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_g <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_g)), shape=".") +
scale_colour_manual(values=NewPurples, name="Gs in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_t <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_t)), shape=".") +
scale_colour_manual(values=NewReds, name="Ts in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
plot_a <- ggplot(mydata, aes(x=x_normcounts, y=y_normcounts)) +
geom_point(aes(colour=factor(no_a)), shape=".") +
scale_colour_manual(values=NewGreens, name="As in kmer") +
scale_x_continuous(name=xlabel, limits=c(0, 3)) +
scale_y_continuous(name=ylabel, limits=c(0, 3)) +
guides(colour = guide_legend(override.aes = list(shape=15))) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# Putting them all together
grid.arrange(plot_a, plot_c, plot_g, plot_t, nrow = 2)
# Spit out correlation
cor.test(mydata$x_normcounts, mydata$y_normcounts, method="pearson", conf.level=0.95)
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
votes <- lapply(parties, function(ii) sum(votedata[votedata$Party == ii,]$Votes))
result <- data.frame(unlist(parties), unlist(votes))
colnames(result) <- c("Party", "Votes")
result <- result[order(-result$Votes),]
setwd("~/github/thailandge2019")
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
votes <- lapply(parties, function(ii) sum(votedata[votedata$Party == ii,]$Votes))
result <- data.frame(unlist(parties), unlist(votes))
colnames(result) <- c("Party", "Votes")
result <- result[order(-result$Votes),]
library(dplyr)
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
provinces <- as.list(levels(votedata$Province))
library(dplyr)
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
provinces <- as.list(levels(votedata$Province))
votedata %>%
group_by(Province) %>%
summarise(SumVotes = sum(Votes))
View(votedata)
library(dplyr)
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
provinces <- as.list(levels(votedata$Province))
provincial <- votedata %>%
group_by(Province) %>%
summarise(SumVotes = sum(Votes))
View(provincial)
library(dplyr)
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
provinces <- as.list(levels(votedata$Province))
provincial <- votedata %>%
group_by(Province, Party) %>%
summarise(SumVotes = sum(Votes))
View(provincial)
library(dplyr)
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
# provinces <- as.list(levels(votedata$Province))
provincepop <- votedata %>%
group_by(Province) %>%
summarise(SumVotes = sum(Votes))
provincevotes <- votedata %>%
group_by(Province, Party) %>%
summarise(SumVotes = sum(Votes))
View(provincepop)
1:10
1:10 %in% c(1,3,5,9)
test <- merge(provincepop, provicevotes, by = "Province")
test <- merge(provincepop, provincevotes, by = "Province")
View(test)
provincevotespercent <- merge(provincepop, provincevotes, by = "Province")
provincevotespercent$SumVo
provincevotespercent$SumVotes.y <- provincevotespercent$SumVotes.y/provincevotespercent$SumVotes.x
View(provincevotespercent)
provincevotespercent <- merge(provincepop, provincevotes, by = "Province")
provincevotespercent$SumVotes.y <- 100*provincevotespercent$SumVotes.y/provincevotespercent$SumVotes.x
provincevotespercent <- merge(provincepop, provincevotes, by = "Province")
provincevotespercent$SumVotes.y <- 100*provincevotespercent$SumVotes.y/provincevotespercent$SumVotes.x
provincevotespercent$SumVotes.x <- NULL
library(dplyr)
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
# provinces <- as.list(levels(votedata$Province))
provincepop <- votedata %>%
group_by(Province) %>%
summarise(SumVotes = sum(Votes))
provincevotes <- votedata %>%
group_by(Province, Party) %>%
summarise(SumVotes = sum(Votes))
provincevotespercent <- merge(provincepop, provincevotes, by = "Province")
provincevotespercent$SumVotes.y <- 100*provincevotespercent$SumVotes.y/provincevotespercent$SumVotes.x
provincevotespercent$SumVotes.x <- NULL
colnames(provincevotespercent) <- c("Province", "Party", "Votes")
library(dplyr)
votedata <- read.csv("FullReporting_ECT_20190328_District_level_EN.csv")
parties <- as.list(levels(votedata$Party))
# provinces <- as.list(levels(votedata$Province))
provincepop <- votedata %>%
group_by(Province) %>%
summarise(SumVotes = sum(Votes))
provincevotes <- votedata %>%
group_by(Province, Party) %>%
summarise(SumVotes = sum(Votes))
provincevotespercent <- merge(provincepop, provincevotes, by = "Province")
provincevotespercent$SumVotes.y <- 100*provincevotespercent$SumVotes.y/provincevotespercent$SumVotes.x
provincevotespercent$SumVotes.x <- NULL
colnames(provincevotespercent) <- c("Province", "Party", "Percent")
provincevotespercent[provincevotespercent$Province == "Bangkok Metropolis"]
provincevotespercent[provincevotespercent$Province == "Bangkok Metropolis",]
bkk <- provincevotespercent[provincevotespercent$Province == "Bangkok Metropolis",]
bkk <- bkk[order(-bkk$Percent)]
bkk <- bkk[order(-bkk$Percent),]
View(bkk)
slices <- bkk$Percent
lbls <- bkk$Party
pie(slices, labels=lbls)
ffp <- provincevotespercent[provincevotespercent$Party == "Future Forward Party",]
ffp
ffp <- ffp[-order(ffp$Percent),]
View(ffp)
ffp <- provincevotespercent[provincevotespercent$Party == "Future Forward Party",]
ffp <- ffp[order(-ffp$Percent),]
View(ffp)
library(maps)
install.packages(maps)
install.packages("maps)
iuo
iuoueoue
uuuuuuu
;
;;;
fuck
q
""
"
install.packages("maps")
install.packages("mapdata")
library(maps)
library(mapdata)
map('Thailand')
map('worldHired', 'Thailand')
map('worldHires', 'Thailand')
library(sp)
install.packages("sp")
library(sp)
gadm <- readRDS("datasets/THA_adm2.rds")
gadm <- readRDS("gadm36_THA_1_sp.rds")
colours = rainbow(100)
plot(gadm, col=colours)
gadm$NAME_1
provinces
ffprovinces <- ffp$Province
ffppercent <- ffp$Percent
colours = grey(100)
colours = grey()
colours = grey(100)
colours = grey.colors(100)
colours
plot(gadm, col=colours[ffppercent])
plot(gadm, col=colours[ffppercent/100])
plot(gadm, col=colours[ffppercent])
colours = grey.colors(1000)
plot(gadm, col=colours[ffppercent*10])
shadesofgrey <- colorRampPalette(c("grey0", "grey100"))
shadesofgrey(1000)
plot(gadm, col=shadesofgrey(ffppercent*10))
plot(gadm, col=shadesofgrey[ffppercent*10])
plot(gadm, col=shadesofgrey[round(ffppercent*10)])
shadesofgrey
plot(gadm, col=shadesofgrey(100)[ffppercent])
shadesofgrey <- colorRampPalette(c("grey100", "grey0"))
plot(gadm, col=shadesofgrey(100)[ffppercent])
grey48
regions <- ffprovinces
plot(gadm, col=shadesofgrey(100)[ffppercent])
